<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
	<head>
		<title>Accessibility and Usability</title>
		<link rel="stylesheet" type="text/css" href="css/epub.css" />
	</head>
	<style>
		body{font-size:84%;}
		.dragbox{width:300px; padding-left:20px; float:left;}
		.draglist{padding:10px; margin-bottom:5px; border:2px dashed #ccc; background-color:#eee; cursor:move;}
		.draglist:hover{border-color:#cad5eb; background-color:#f0f3f9;}
		.dragremind{padding-top:2em; clear:both;}
	</style>
	<body>
		<div class="dragbox" id="draglistContainer">
			<div class="draglist" draggable="true">1111111</div>
			<div class="draglist" draggable="true">2222222</div>
		    <div class="draglist" draggable="true">3333333</div>
		    <div class="draglist" draggable="true">4444444</div>
		    <div class="draglist" draggable="true">5555555</div>
		    <div class="draglist" draggable="true">6666666</div>
		</div>
		<div class="dragremind"></div>
		<div id='draglist' draggable="true">哈哈哈哈哈</div>
		<section class="sect1" title="Accessibility and Usability">
			<h2 class="title" id="_accessibility_and_usability">Accessibility and Usability</h2>
			<p>The other subject that needs treatment is what is meant by <em>accessibility</em> and
					<em>usability</em> in the context of this guide. These two terms are often used
				in overlapping fashion, and can mean different things to different people, but I’ll
				be using the following definitions:</p>
			<p>Accessibility of content is the intrinsic capabilities of the EPUB 3 publication: the
				quality of the data and meaning that can be extracted from it; the built-in
				navigational capabilities; the additional functionality, like text and audio
				synchronization (media overlays) and improved synthetic speech. The publisher of an
				EPUB has control over the accessibility of their publication, whether directly
				through the tools they use to generate the source or in post-production
				workflows.</p>
			<p>Usability is the ability of a reader to access the content on any given reading
				system. A publisher may make an EPUB 3 publication rich with accessibility features,
				but if a reader does not have the right device or software program to access those
				features it is not the publication itself that is to blame.</p>
			<p>But even making these distinctions, there’s no simple answer to what a fully
				accessible EPUB is, or to what a completely usable reading system is. It means
				something different depending on your needs.</p>
			<p>A person with a print disability, for example, “cannot effectively read print because
				of a visual, physical, perceptual, developmental, cognitive, or learning disability”
					(<a class="ulink" href="http://www.daisy.org/glossary/12#term325" target="_top"
					>DAISY Glossary</a>). The best method to address any one of these areas is not
				necessarily the best method to address any of the others. Audio is necessary for
				readers who are blind, for example, but a reader who is dyslexic might benefit from
				audio, or from font changes or visual cues, or from a combination of these. There’s
				no universal answer.</p>
			<p>And with EPUB 3 opening the door to new rich multimedia experiences, so too do you
				need to think beyond traditional print disabilities and recognize that ebooks have
				the potential to exclude a greater segment of the population if not done with
				care:</p>
			<ul class="itemizedlist">
				<li class="listitem"><p> the inability to hear embedded audio and video is a concern
						for persons who are deaf or hard or hearing;</p></li>
				<li class="listitem"><p> interactivity and animations that rely on color recognition
						have the potential to exclude persons who are color blind or have difficulty
						distinguishing blended contrasts;</p></li>
				<li class="listitem"><p> the new trend to voice activated devices has the potential
						to make reading for persons with speech impairments difficult.</p></li>
			</ul>
			<p>The point isn’t to suggest that the problem is too big to try and tackle, in fact the
				opposite. If you haven’t caught on, I’m making the case why ignoring accessibility
				means ignoring a large segment of readers who would love to be buying and consuming
				your ebooks. It is estimated that 10 percent of the population has a print
				disability; that’s a large market you could be catering to to increase your
				sales.</p>
			<p>And we haven’t yet touched on situational disabilities. A situational disability is
				one in which a person who would otherwise be able to interact with your ebook is in
				a position in which they can’t, or find themselves facing the same limitations. For
				example:</p>
			<ul class="itemizedlist">
				<li class="listitem"><p> someone trying to read on a cell phone will gain an
						appreciation for the difficulty of reading small sections of prose at a
						time, as someone with low vision experiences when reading using zooming
						software; </p></li>
				<li class="listitem"><p> someone attempting to read on their deck on a bright summer
						day, angling and holding their tablet close to their face to follow the
						prose, will understand the difficulty experienced by someone with
						age-related sight loss and/or who has trouble with contrasts; </p></li>
				<li class="listitem"><p> someone sitting on the subway going home who has to turn on
						subtitles in an embedded video to read the dialogue will experience how a
						person who is deaf interacts with the video. </p></li>
			</ul>
			<p>In other words, everyone will benefit from accessible data at some point in their
				lives, as there are a lot of ways accessible data improves access that aren’t always
				immediately obvious. Accessibility is critical for some and universally beneficial
				for all.</p>
			<p>The richer you make your data the more intelligently it can be used; so even though
				you may not be able to accommodate everyone at the end of the day, you can go a long
				way toward accommodating the majority with a number of simple measures. And that is
				the focus of this guide.</p>
			<p>Usability as defined here, however, is outside the realm of content production, and
				can’t be tackled by a guide whose focus is increasing the quality of your content.
				The EPUB specification bakes in some requirements on the reading system side to
				improve usability, but not every reading system is going to support every accessible
				feature, and usability is not just support for EPUB but extends into the design of
				reading systems themselves.</p>
			<p>You can’t let usability influence your accessibility decision making, however. A
				typical practice is to target the industry-leading platform and build around its
				capabilities (and deficiencies), but what value does this bring you in the long
				term? Think of the cost that resulted from making Internet Explorer-only friendly
				websites when it held 90 plus percent of the market as an example of where following
				the leader can take you. Your books will hopefully be selling well for years to
				come, but unless you enjoy reformatting from scratch each time you look to upgrade
				or enhance, it pays to put the effort into doing them right up front.</p>
			<p>But it’s time to roll up our sleeves and get our hands dirty…</p>
		</section>
	</body>
	<script type="text/javascript"
	src="https://cdn.jsdelivr.net/npm/sortablejs@1.6.1/Sortable.min.js"/>
	<script type="text/javascript">
		var list = document.getElementById("draglistContainer");
		var sortable = new Sortable(list, {
			animation: 150,
			group: "localStorage-example",
			onChoose: function (e) {
				console.log('onChoose',e)
				// evt.oldIndex;  // element index within parent
			},

			// Element dragging started
			onStart: function (e) {
				console.log('onStart',e)
				// evt.oldIndex;  // element index within parent
			},
			onEnd: function (e) {
				// var itemEl = evt.item;  // dragged HTMLElement
				// evt.to;    // target list
				// evt.from;  // previous list
				// evt.oldIndex;  // element's old index within old parent
				// evt.newIndex;  // element's new index within new parent
				console.log('onEnd', e)
				console.log('sortable', sortable.toArray())
				console.log('evt.to.textContent', e.to.outerText)
				console.log('onEnd', e.to.outerText.replace(/(\t|\r|\n)/g,' ').trim().replace(/\s+/g,','))
			}
		})
	</script>
</html>
